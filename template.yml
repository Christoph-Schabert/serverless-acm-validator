AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: A starter AWS Lambda function.
Parameters:
  HostedZoneId: 
    Type: String
    Default: ""
    Description: Enter Hosted Zone Id
  HostedZoneDomain: 
    Type: String
    Default: ""
    Description: Enter Hosted Zone Domain
Resources:
  CreateCertificateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/certificates.create_acm_certificate
      Runtime: python3.6
      CodeUri: .
      Description: Create ACM Certificate
      Environment:
        Variables:
          HOSTED_ZONE_ID: 
            !If [ParameterHostedZoneIDSeNotSett, !Ref HostedZoneId ,!Ref HostedZoneResource]

  DeleteCertificateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/certificates.delete_acm_certificate
      Runtime: python3.6
      CodeUri: .
      Description: Delete ACM Certificate

  StatusCertificateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/certificates.validates_acm_via_dns
      Runtime: python3.6
      CodeUri: .
      Description: Validate ACM via DNS

  ValidateCertificateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/certificates.status_acm_certificate
      Runtime: python3.6
      CodeUri: .
      Description: Get Status of ACM Certificate
      Environment:
        Variables:
          HOSTED_ZONE_ID: 
            !If [ParameterHostedZoneIDSeNotSett, !Ref HostedZoneId ,!Ref HostedZoneResource]

  CloudFormationResourceFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/cloudformation.start_custom_resource
      Runtime: python3.6
      CodeUri: .
      Description: Invoke Step Function Custom Resource
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId 
          STACK_NAME: !Ref AWS::StackName 

  CloudFormationSendSuccessSignalFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/cloudformation.send_success_signal
      Runtime: python3.6
      CodeUri: .
      Description: Send Success Signal to CloudFormation

  CloudFormationSendFailedSignalFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lib/cloudformation.send_failed_signal
      Runtime: python3.6
      CodeUri: .
      Description: Send Failed Signal to CloudFormation

  HostedZoneResource:
    Type: "AWS::Route53::HostedZone"
    Condition: ParameterHostedZoneIDSeNotSett
    Properties: 
      Name: 
        Ref: HostedZoneDomain
  CertificatesStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Join [ "-", [ !Ref "AWS::StackName", "certificate"]]
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: 
        !Sub |
            {
            "StartAt": "SelectOperationByRequestType",
            "States": {
                "SelectOperationByRequestType": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.RequestType",
                            "StringEquals": "Create",
                            "Next": "Create Acm Certificate"
                        },
                        {
                            "Variable": "$.RequestType",
                            "StringEquals": "Update",
                            "Next": "Create Acm Certificate"
                        },
                        {
                            "Variable": "$.RequestType",
                            "StringEquals": "Delete",
                            "Next": "Delete Acm Certificate"
                        }
                    ],
                    "Default": "SendFailedSignal"
                },
                "Create Acm Certificate": {
                    "Type": "Task",
                    "Resource": "${CreateCertificateFunction.Arn}",
                    "TimeoutSeconds": 30,
                    "Next": "Wait 10 after ACM Creation",
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.ErrorObject",
                            "Next": "SendFailedSignal"
                        }
                    ]
                },
                "Wait 10 after ACM Creation": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Validates ACM via DNS"
                  },
              
                "Validates ACM via DNS": {
                    "Type": "Task",
                    "Resource": "${ValidateCertificateFunction.Arn}",
                    "TimeoutSeconds": 30,
                    "Next": "Get ACM Status",
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.ErrorObject",
                            "Next": "SendFailedSignal"
                        }
                    ]
                },
                "Get ACM Status": {
                    "Type": "Task",
                    "Resource": "${StatusCertificateFunction.Arn}",
                    "TimeoutSeconds": 30,
                    "Next": "Choice ACM Status",
                    "ResultPath": "$.ACMStatus",
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.ErrorObject",
                            "Next": "SendFailedSignal"
                        }
                    ]
                },
                "Choice ACM Status": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.ACMStatus",
                            "StringEquals": "PENDING_VALIDATION",
                            "Next": "Wait for ACM Status"
                        },
                        {
                            "Variable": "$.ACMStatus",
                            "StringEquals": "ISSUED",
                            "Next": "SendSuccessSignal"
                        }
                    ],
                    "Default": "SendFailedSignal"
                },
                "Wait for ACM Status": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Get ACM Status"
                  },
                "Delete Acm Certificate": {
                    "Type": "Task",
                    "Resource": "${DeleteCertificateFunction.Arn}",
                    "TimeoutSeconds": 30,
                    "Next": "SendSuccessSignal",
                    "Catch": [
                        {
                            "ErrorEquals": [
                                "States.ALL"
                            ],
                            "ResultPath": "$.ErrorObject",
                            "Next": "SendFailedSignal"
                        }
                    ]
                },
                "SendSuccessSignal": {
                    "Type": "Task",
                    "Comment": "Send a success signal back to cloudformation",
                    "Resource": "${CloudFormationSendSuccessSignalFunction.Arn}",
                    "End": true
                },
                "SendFailedSignal": {
                    "Type": "Task",
                    "Comment": "Send a failed signal back to cloudformation",
                    "Resource": "${CloudFormationSendFailedSignalFunction.Arn}",
                    "Next": "StopExecutionWithFailure"
                },
                "StopExecutionWithFailure": {
                    "Type": "Fail"
                }
            }
            }
  StepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                !Join [ ".", [ states, !Ref "AWS::Region", !Ref "AWS::URLSuffix"]]
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt [ CreateCertificateFunction, Arn ]
                  - !GetAtt [ DeleteCertificateFunction, Arn ]
                  - !GetAtt [ StatusCertificateFunction, Arn ]
                  - !GetAtt [ ValidateCertificateFunction, Arn ]
                  - !GetAtt [ CloudFormationSendSuccessSignalFunction, Arn ]
                  - !GetAtt [ CloudFormationSendFailedSignalFunction, Arn ]
Outputs:
  CustomResourceExecutor:
    Value:
      !GetAtt [CloudFormationResourceFunction, Arn]
    Export:
      Name: CustomResourceExecutor

Conditions:
  ParameterHostedZoneIDSeNotSett:
    !Equals [ !Ref HostedZoneId, ""]
    
